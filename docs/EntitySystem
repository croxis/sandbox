class EntitySystem(DirectObject):
    def __init__(self, *types):
        self.entities = {}
        self.interested = set()
        self.enabled = True
        for t in types:
            log.debug(str(self) + " interested in " + str(t))
            self.interested.add(t)
        self.accept("addComponent", self.addComponent)

    def addComponent(self, entity, component):
        if component.__class__ in self.interested and entity not in self.entities:
            log.debug("Adding component " + str(component) + " to entity " + str(entity))
            self.entities[entity.id] = entity

    def run(self):
        if self.enabled:
            self.begin()
            #self.processEntities(self.entities)
            for e in self.entities.values():
                self.process(e)
            self.end()

    def init(self):
        """This function is overridden for initialization instead of __init__."""

    def begin(self):
        pass

    def process(self, entity):
        """This is overridden"""
        log.error(str(self) + " has no process function.")
        raise NotImplementedError

    def end(self):
        pass